{"version":3,"sources":["utils/alphabets.js","utils/index.js","components/app/index.js","components/app/app.js","index.js"],"names":["russianAlphabet","getRandomLetter","alphabet","Math","floor","random","length","App","alphabets","useState","letter","setLetter","fakeLetter","setFakeLetter","isAnimation","setIsAnimation","pastLetters","setPastLetters","isUnique","setIsUnique","onAnimationEnd","filtered","filter","l","includes","className","onClick","letterIntervalId","setInterval","Promise","resolve","setTimeout","clearInterval","animationChangeLetter","then","disabled","type","name","onChange","state","checked","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAAMA,EAAkB,CACpB,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UC/BEC,EAAkB,SAACC,GACrB,OAAOA,EAASC,KAAKC,MAAMD,KAAKE,SAAWH,EAASI,UCFzCC,G,MCMH,WAAO,IACPP,EAAoBQ,EAApBR,gBADM,EAEcS,mBAAST,EAAgB,IAFvC,mBAEPU,EAFO,KAECC,EAFD,OAGsBF,qBAHtB,mBAGPG,EAHO,KAGKC,EAHL,OAIwBJ,oBAAS,GAJjC,mBAIPK,EAJO,KAIMC,EAJN,OAKwBN,mBAAS,IALjC,mBAKPO,EALO,KAKMC,EALN,OAMkBR,oBAAS,GAN3B,mBAMPS,EANO,KAMGC,EANH,KAsBRC,EAAiB,WAGnB,GAFAL,GAAe,GACfE,EAAe,GAAD,mBAAKD,GAAL,CAAkBN,KAC5BQ,EAAU,CACV,IAAMG,EAAWrB,EAAgBsB,QAAO,SAACC,GAAD,OAAQ,sBAAIP,GAAJ,CAAiBN,IAAQc,SAASD,MAClFZ,EAAUV,EAAgBoB,SAE1BV,EAAUV,EAAgBD,KAQlC,OACI,yBAAKyB,UAAU,OACX,yBAAKA,UAAU,UAAUX,EAAcF,EAAaF,GACpD,4BAAQe,UAAU,MAAMC,QAPV,YAzBQ,WAC1BX,GAAe,GACf,IAAMY,EAAmBC,aAAY,WACjCf,EAAcZ,EAAgBD,MAC/B,IAEH,OAAO,IAAI6B,SAAQ,SAACC,GAChBC,YAAW,WACPC,cAAcL,GACdG,EAAQ,mBAnBG,SAoCnBG,GAAwBC,KAAKd,IAMuBe,SAAUrB,GAA1D,6EAGA,yBAAKW,UAAU,YACX,sFACA,+BACI,2BACIW,KAAK,WACLC,KAAK,SACLC,SAAU,kBAAMnB,GAAY,SAACoB,GAAD,OAAYA,MACxCC,QAAStB,IAEb,gMCvDpBuB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.0d9e7110.chunk.js","sourcesContent":["const russianAlphabet = [\r\n    'А',\r\n    'Б',\r\n    'В',\r\n    'Г',\r\n    'Д',\r\n    'Е',\r\n    'Ё',\r\n    'Ж',\r\n    'З',\r\n    'И',\r\n    'Й',\r\n    'К',\r\n    'Л',\r\n    'М',\r\n    'Н',\r\n    'О',\r\n    'П',\r\n    'Р',\r\n    'С',\r\n    'Т',\r\n    'У',\r\n    'Ф',\r\n    'Х',\r\n    'Ц',\r\n    'Ч',\r\n    'Ш',\r\n    'Щ',\r\n    'Ъ',\r\n    'Ы',\r\n    'Ь',\r\n    'Э',\r\n    'Ю',\r\n    'Я',\r\n];\r\n\r\nexport {\r\n    russianAlphabet\r\n}","import * as alphabets from './alphabets';\r\n\r\nconst getRandomLetter = (alphabet) => {\r\n    return alphabet[Math.floor(Math.random() * alphabet.length)];\r\n};\r\n\r\nexport {\r\n    alphabets,\r\n    getRandomLetter\r\n}","import App from './app';\r\nexport default App;","import React, { useState } from 'react';\r\nimport { alphabets, getRandomLetter } from '../../utils/';\r\n\r\nimport './app.scss';\r\n\r\nconst ANIMATION_DURATION = 1000;\r\n\r\nconst App = () => {\r\n    const { russianAlphabet } = alphabets;\r\n    const [letter, setLetter] = useState(russianAlphabet[0]);\r\n    const [fakeLetter, setFakeLetter] = useState();\r\n    const [isAnimation, setIsAnimation] = useState(false);\r\n    const [pastLetters, setPastLetters] = useState([]);\r\n    const [isUnique, setIsUnique] = useState(false);\r\n\r\n    const animationChangeLetter = () => {\r\n        setIsAnimation(true);\r\n        const letterIntervalId = setInterval(() => {\r\n            setFakeLetter(getRandomLetter(russianAlphabet));\r\n        }, 60);\r\n\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                clearInterval(letterIntervalId);\r\n                resolve('letter change');\r\n            }, ANIMATION_DURATION);\r\n        });\r\n    };\r\n\r\n    const onAnimationEnd = () => {\r\n        setIsAnimation(false);\r\n        setPastLetters([...pastLetters, letter]);\r\n        if (isUnique) {\r\n            const filtered = russianAlphabet.filter((l) => ![...pastLetters, letter].includes(l));\r\n            setLetter(getRandomLetter(filtered));\r\n        } else {\r\n            setLetter(getRandomLetter(russianAlphabet));\r\n        }\r\n    };\r\n\r\n    const onChangeClick = () => {\r\n        animationChangeLetter().then(onAnimationEnd);\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"letter\">{isAnimation ? fakeLetter : letter}</div>\r\n            <button className=\"btn\" onClick={onChangeClick} disabled={isAnimation} >\r\n                Сменить букву\r\n            </button>\r\n            <div className=\"settings\">\r\n                <h2>Настройки</h2>\r\n                <label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name=\"repeat\"\r\n                        onChange={() => setIsUnique((state) => !state)}\r\n                        checked={isUnique}\r\n                    />\r\n                    <span>Буквы должны быть уникальные</span>\r\n                </label>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}