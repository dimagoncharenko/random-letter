{"version":3,"sources":["utils/alphabets.js","utils/index.js","components/Letter/index.js","components/Letter/letter.js","components/Settings/index.js","components/Settings/settings.js","components/App/index.js","components/App/app.js","index.js"],"names":["russianAlphabet","getRandomLetter","alphabet","Math","floor","random","length","initialSettings","isUnique","isAnimation","Letter","isAnimationPending","fakeLetter","letter","className","Settings","settings","setSettings","useEffect","Object","keys","localStorage","setItem","JSON","stringify","type","name","onChange","prevSettings","checked","App","alphabets","useState","setLetter","setFakeLetter","setIsAnimationPending","relevantLetters","setRelevatLetters","pastLetters","setPastLetters","isHasRelevantLetters","updateRelevantLetters","useCallback","newLetter","filtered","filter","l","includes","storageLetters","parse","getItem","stogeSettings","animationChangeLetter","Promise","resolve","letterIntervalId","setInterval","setTimeout","clearInterval","onAnimationEnd","onChangeClick","a","then","onClick","disabled","removeItem","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d51ddfd6.chunk.js","sourcesContent":["const russianAlphabet = [\r\n    'А',\r\n    'Б',\r\n    'В',\r\n    'Г',\r\n    'Д',\r\n    'Е',\r\n    'Ё',\r\n    'Ж',\r\n    'З',\r\n    'И',\r\n    'Й',\r\n    'К',\r\n    'Л',\r\n    'М',\r\n    'Н',\r\n    'О',\r\n    'П',\r\n    'Р',\r\n    'С',\r\n    'Т',\r\n    'У',\r\n    'Ф',\r\n    'Х',\r\n    'Ц',\r\n    'Ч',\r\n    'Ш',\r\n    'Щ',\r\n    'Ъ',\r\n    'Ы',\r\n    'Ь',\r\n    'Э',\r\n    'Ю',\r\n    'Я',\r\n];\r\n\r\nexport {\r\n    russianAlphabet\r\n}","import * as alphabets from './alphabets';\r\n\r\nconst getRandomLetter = (alphabet) => {\r\n    return alphabet[Math.floor(Math.random() * alphabet.length)];\r\n};\r\n\r\nconst initialSettings = {\r\n    isUnique: true,\r\n    isAnimation: false,\r\n};\r\n\r\nexport { alphabets, getRandomLetter, initialSettings };\r\n","import Letter from './letter';\nexport default Letter;","import React from 'react';\n\nconst Letter = ({ isAnimationPending, fakeLetter, letter }) => {\n    const renderLetter = () => {\n        if (isAnimationPending) {\n            return fakeLetter;\n        }\n\n        if (!letter) {\n            return 'Буква не выбрана';\n        }\n\n        return letter;\n    };\n\n    return <div className=\"letter\">{renderLetter()}</div>;\n};\n\nexport default Letter;\n","import Settings from './settings';\nexport default Settings;","import React, { useEffect } from 'react';\n\nconst Settings = ({ settings, setSettings }) => {\n    useEffect(() => {\n        if (!Object.keys(settings).length) {\n            return;\n        }\n        localStorage.setItem('settings', JSON.stringify(settings));\n    }, [settings]);\n\n    const onChangeUnique = () => {\n        setSettings((prevSettings) => {\n            return {\n                ...prevSettings,\n                isUnique: !prevSettings.isUnique,\n            };\n        });\n    };\n\n    const onChangeAnimation = () => {\n        setSettings((prevSettings) => {\n            return {\n                ...prevSettings,\n                isAnimation: !prevSettings.isAnimation,\n            };\n        });\n    };\n\n    return (\n        <div className=\"settings\">\n            <h2>Настройки</h2>\n            <label>\n                <input type=\"checkbox\" name=\"unique\" onChange={onChangeUnique} checked={settings.isUnique || false} />\n                <span>Буквы должны быть уникальные</span>\n            </label>\n            <label>\n                <input\n                    type=\"checkbox\"\n                    name=\"animation\"\n                    onChange={onChangeAnimation}\n                    checked={settings.isAnimation || false}\n                />\n                <span>Включить анимацию</span>\n            </label>\n        </div>\n    );\n};\n\nexport default Settings;\n","import App from './app';\r\nexport default App;","import React, { useEffect, useState, useCallback } from 'react';\r\nimport { alphabets, getRandomLetter, initialSettings } from '../../utils';\r\nimport Letter from '../Letter';\r\nimport Settings from '../Settings';\r\n\r\nimport './app.scss';\r\n\r\nconst ANIMATION_DURATION = 500;\r\n\r\n\r\n\r\nconst App = () => {\r\n    const { russianAlphabet } = alphabets;\r\n    const [letter, setLetter] = useState();\r\n    const [fakeLetter, setFakeLetter] = useState();\r\n    const [isAnimationPending, setIsAnimationPending] = useState(false);\r\n    const [relevantLetters, setRelevatLetters] = useState(russianAlphabet);\r\n    const [pastLetters, setPastLetters] = useState([]);\r\n    const [settings, setSettings] = useState({})\r\n    \r\n    const isHasRelevantLetters = relevantLetters.length;\r\n\r\n    const updateRelevantLetters = useCallback(\r\n        (newLetter) => {\r\n            if (settings.isUnique) {\r\n                const filtered = russianAlphabet.filter((l) => ![...pastLetters, newLetter].includes(l));\r\n                setRelevatLetters(filtered);\r\n                return;\r\n            }\r\n\r\n            setRelevatLetters(russianAlphabet);\r\n        },\r\n        [pastLetters, russianAlphabet, settings.isUnique]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const storageLetters = JSON.parse(localStorage.getItem('pastLetters')) || [];\r\n        const stogeSettings = JSON.parse(localStorage.getItem('settings')) || initialSettings;\r\n        setPastLetters(storageLetters);\r\n        setSettings(stogeSettings);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!pastLetters.length) {\r\n            return;\r\n        }\r\n        localStorage.setItem('pastLetters', JSON.stringify(pastLetters));\r\n    }, [pastLetters]);\r\n\r\n    useEffect(() => {\r\n        updateRelevantLetters();\r\n    }, [settings.isUnique, updateRelevantLetters]);\r\n\r\n    const onNewGame = () => {\r\n        setPastLetters([]);\r\n        setLetter('');\r\n        setRelevatLetters(russianAlphabet);\r\n        localStorage.removeItem('pastLetters');\r\n    };\r\n\r\n    const animationChangeLetter = () => {\r\n        if (!settings.isAnimation) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        setIsAnimationPending(true);\r\n\r\n        const letterIntervalId = setInterval(() => {\r\n            setFakeLetter(getRandomLetter(russianAlphabet));\r\n        }, 60);\r\n\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                clearInterval(letterIntervalId);\r\n                resolve('letter change');\r\n            }, ANIMATION_DURATION);\r\n        });\r\n    };\r\n\r\n    const onAnimationEnd = () => {\r\n        setIsAnimationPending(false);\r\n        const newLetter = getRandomLetter(relevantLetters);\r\n        setLetter(newLetter);\r\n        return newLetter;\r\n    };\r\n\r\n    const onChangeClick = async () => {\r\n        const newLetter = await animationChangeLetter().then(onAnimationEnd);\r\n        setPastLetters([...pastLetters, newLetter]);\r\n        updateRelevantLetters(newLetter);\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            {!isHasRelevantLetters && 'Уникальные буквы закончились'}\r\n            <Letter isAnimationPending={isAnimationPending} fakeLetter={fakeLetter} letter={letter} />\r\n            <button className=\"btn\" onClick={onChangeClick} disabled={isAnimationPending || !isHasRelevantLetters}>\r\n                Сменить букву\r\n            </button>\r\n            <button className=\"btn\" onClick={onNewGame}>\r\n                Новая игра\r\n            </button>\r\n\r\n            <div className=\"past-letters\">\r\n                <h2>История</h2>\r\n                {pastLetters.map((letter) => `${letter} `)}\r\n            </div>\r\n            <Settings\r\n                settings={settings}\r\n                setSettings={setSettings}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}